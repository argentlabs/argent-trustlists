// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DappAdded extends ethereum.Event {
  get params(): DappAdded__Params {
    return new DappAdded__Params(this);
  }
}

export class DappAdded__Params {
  _event: DappAdded;

  constructor(event: DappAdded) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get filter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get validAfter(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DappRemoved extends ethereum.Event {
  get params(): DappRemoved__Params {
    return new DappRemoved__Params(this);
  }
}

export class DappRemoved__Params {
  _event: DappRemoved;

  constructor(event: DappRemoved) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FilterUpdateRequested extends ethereum.Event {
  get params(): FilterUpdateRequested__Params {
    return new FilterUpdateRequested__Params(this);
  }
}

export class FilterUpdateRequested__Params {
  _event: FilterUpdateRequested;

  constructor(event: FilterUpdateRequested) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get filter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get validAfter(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FilterUpdated extends ethereum.Event {
  get params(): FilterUpdated__Params {
    return new FilterUpdated__Params(this);
  }
}

export class FilterUpdated__Params {
  _event: FilterUpdated;

  constructor(event: FilterUpdated) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get filter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get validAfter(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get newRegistryOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegistryCreated extends ethereum.Event {
  get params(): RegistryCreated__Params {
    return new RegistryCreated__Params(this);
  }
}

export class RegistryCreated__Params {
  _event: RegistryCreated;

  constructor(event: RegistryCreated) {
    this._event = event;
  }

  get registryId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get registryOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TimelockChangeRequested extends ethereum.Event {
  get params(): TimelockChangeRequested__Params {
    return new TimelockChangeRequested__Params(this);
  }
}

export class TimelockChangeRequested__Params {
  _event: TimelockChangeRequested;

  constructor(event: TimelockChangeRequested) {
    this._event = event;
  }

  get newTimelockPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TimelockChanged extends ethereum.Event {
  get params(): TimelockChanged__Params {
    return new TimelockChanged__Params(this);
  }
}

export class TimelockChanged__Params {
  _event: TimelockChanged;

  constructor(event: TimelockChanged) {
    this._event = event;
  }

  get newTimelockPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ToggledRegistry extends ethereum.Event {
  get params(): ToggledRegistry__Params {
    return new ToggledRegistry__Params(this);
  }
}

export class ToggledRegistry__Params {
  _event: ToggledRegistry;

  constructor(event: ToggledRegistry) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get registryId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get enabled(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DappRegistry__getAuthorisationResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DappRegistry extends ethereum.SmartContract {
  static bind(address: Address): DappRegistry {
    return new DappRegistry("DappRegistry", address);
  }

  authorisations(param0: i32, param1: Address): Bytes {
    let result = super.call(
      "authorisations",
      "authorisations(uint8,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_authorisations(param0: i32, param1: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "authorisations",
      "authorisations(uint8,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  enabledRegistryIds(param0: Address): Bytes {
    let result = super.call(
      "enabledRegistryIds",
      "enabledRegistryIds(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try_enabledRegistryIds(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "enabledRegistryIds",
      "enabledRegistryIds(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorisation(
    _registryId: i32,
    _dapp: Address
  ): DappRegistry__getAuthorisationResult {
    let result = super.call(
      "getAuthorisation",
      "getAuthorisation(uint8,address):(address,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId)),
        ethereum.Value.fromAddress(_dapp)
      ]
    );

    return new DappRegistry__getAuthorisationResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getAuthorisation(
    _registryId: i32,
    _dapp: Address
  ): ethereum.CallResult<DappRegistry__getAuthorisationResult> {
    let result = super.tryCall(
      "getAuthorisation",
      "getAuthorisation(uint8,address):(address,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId)),
        ethereum.Value.fromAddress(_dapp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DappRegistry__getAuthorisationResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  isAuthorised(
    _wallet: Address,
    _spender: Address,
    _to: Address,
    _data: Bytes
  ): boolean {
    let result = super.call(
      "isAuthorised",
      "isAuthorised(address,address,address,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_wallet),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAuthorised(
    _wallet: Address,
    _spender: Address,
    _to: Address,
    _data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorised",
      "isAuthorised(address,address,address,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_wallet),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEnabledRegistry(_wallet: Address, _registryId: i32): boolean {
    let result = super.call(
      "isEnabledRegistry",
      "isEnabledRegistry(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_wallet),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId))
      ]
    );

    return result[0].toBoolean();
  }

  try_isEnabledRegistry(
    _wallet: Address,
    _registryId: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEnabledRegistry",
      "isEnabledRegistry(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_wallet),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newTimelockPeriod(): BigInt {
    let result = super.call(
      "newTimelockPeriod",
      "newTimelockPeriod():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_newTimelockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newTimelockPeriod",
      "newTimelockPeriod():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingFilterUpdates(param0: i32, param1: Address): Bytes {
    let result = super.call(
      "pendingFilterUpdates",
      "pendingFilterUpdates(uint8,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_pendingFilterUpdates(
    param0: i32,
    param1: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "pendingFilterUpdates",
      "pendingFilterUpdates(uint8,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registryOwners(param0: i32): Address {
    let result = super.call(
      "registryOwners",
      "registryOwners(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toAddress();
  }

  try_registryOwners(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registryOwners",
      "registryOwners(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timelockPeriod(): BigInt {
    let result = super.call("timelockPeriod", "timelockPeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_timelockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockPeriod",
      "timelockPeriod():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockPeriodChangeAfter(): BigInt {
    let result = super.call(
      "timelockPeriodChangeAfter",
      "timelockPeriodChangeAfter():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_timelockPeriodChangeAfter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockPeriodChangeAfter",
      "timelockPeriodChangeAfter():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toggleRegistry(_registryId: i32, _enabled: boolean): boolean {
    let result = super.call(
      "toggleRegistry",
      "toggleRegistry(uint8,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId)),
        ethereum.Value.fromBoolean(_enabled)
      ]
    );

    return result[0].toBoolean();
  }

  try_toggleRegistry(
    _registryId: i32,
    _enabled: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "toggleRegistry",
      "toggleRegistry(uint8,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_registryId)),
        ethereum.Value.fromBoolean(_enabled)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _timelockPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDappCall extends ethereum.Call {
  get inputs(): AddDappCall__Inputs {
    return new AddDappCall__Inputs(this);
  }

  get outputs(): AddDappCall__Outputs {
    return new AddDappCall__Outputs(this);
  }
}

export class AddDappCall__Inputs {
  _call: AddDappCall;

  constructor(call: AddDappCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dapp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _filter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddDappCall__Outputs {
  _call: AddDappCall;

  constructor(call: AddDappCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _newRegistryOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class ConfirmFilterUpdateCall extends ethereum.Call {
  get inputs(): ConfirmFilterUpdateCall__Inputs {
    return new ConfirmFilterUpdateCall__Inputs(this);
  }

  get outputs(): ConfirmFilterUpdateCall__Outputs {
    return new ConfirmFilterUpdateCall__Outputs(this);
  }
}

export class ConfirmFilterUpdateCall__Inputs {
  _call: ConfirmFilterUpdateCall;

  constructor(call: ConfirmFilterUpdateCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dapp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConfirmFilterUpdateCall__Outputs {
  _call: ConfirmFilterUpdateCall;

  constructor(call: ConfirmFilterUpdateCall) {
    this._call = call;
  }
}

export class ConfirmTimelockChangeCall extends ethereum.Call {
  get inputs(): ConfirmTimelockChangeCall__Inputs {
    return new ConfirmTimelockChangeCall__Inputs(this);
  }

  get outputs(): ConfirmTimelockChangeCall__Outputs {
    return new ConfirmTimelockChangeCall__Outputs(this);
  }
}

export class ConfirmTimelockChangeCall__Inputs {
  _call: ConfirmTimelockChangeCall;

  constructor(call: ConfirmTimelockChangeCall) {
    this._call = call;
  }
}

export class ConfirmTimelockChangeCall__Outputs {
  _call: ConfirmTimelockChangeCall;

  constructor(call: ConfirmTimelockChangeCall) {
    this._call = call;
  }
}

export class CreateRegistryCall extends ethereum.Call {
  get inputs(): CreateRegistryCall__Inputs {
    return new CreateRegistryCall__Inputs(this);
  }

  get outputs(): CreateRegistryCall__Outputs {
    return new CreateRegistryCall__Outputs(this);
  }
}

export class CreateRegistryCall__Inputs {
  _call: CreateRegistryCall;

  constructor(call: CreateRegistryCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _registryOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreateRegistryCall__Outputs {
  _call: CreateRegistryCall;

  constructor(call: CreateRegistryCall) {
    this._call = call;
  }
}

export class RemoveDappCall extends ethereum.Call {
  get inputs(): RemoveDappCall__Inputs {
    return new RemoveDappCall__Inputs(this);
  }

  get outputs(): RemoveDappCall__Outputs {
    return new RemoveDappCall__Outputs(this);
  }
}

export class RemoveDappCall__Inputs {
  _call: RemoveDappCall;

  constructor(call: RemoveDappCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dapp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveDappCall__Outputs {
  _call: RemoveDappCall;

  constructor(call: RemoveDappCall) {
    this._call = call;
  }
}

export class RequestFilterUpdateCall extends ethereum.Call {
  get inputs(): RequestFilterUpdateCall__Inputs {
    return new RequestFilterUpdateCall__Inputs(this);
  }

  get outputs(): RequestFilterUpdateCall__Outputs {
    return new RequestFilterUpdateCall__Outputs(this);
  }
}

export class RequestFilterUpdateCall__Inputs {
  _call: RequestFilterUpdateCall;

  constructor(call: RequestFilterUpdateCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dapp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _filter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RequestFilterUpdateCall__Outputs {
  _call: RequestFilterUpdateCall;

  constructor(call: RequestFilterUpdateCall) {
    this._call = call;
  }
}

export class RequestTimelockChangeCall extends ethereum.Call {
  get inputs(): RequestTimelockChangeCall__Inputs {
    return new RequestTimelockChangeCall__Inputs(this);
  }

  get outputs(): RequestTimelockChangeCall__Outputs {
    return new RequestTimelockChangeCall__Outputs(this);
  }
}

export class RequestTimelockChangeCall__Inputs {
  _call: RequestTimelockChangeCall;

  constructor(call: RequestTimelockChangeCall) {
    this._call = call;
  }

  get _newTimelockPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestTimelockChangeCall__Outputs {
  _call: RequestTimelockChangeCall;

  constructor(call: RequestTimelockChangeCall) {
    this._call = call;
  }
}

export class ToggleRegistryCall extends ethereum.Call {
  get inputs(): ToggleRegistryCall__Inputs {
    return new ToggleRegistryCall__Inputs(this);
  }

  get outputs(): ToggleRegistryCall__Outputs {
    return new ToggleRegistryCall__Outputs(this);
  }
}

export class ToggleRegistryCall__Inputs {
  _call: ToggleRegistryCall;

  constructor(call: ToggleRegistryCall) {
    this._call = call;
  }

  get _registryId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ToggleRegistryCall__Outputs {
  _call: ToggleRegistryCall;

  constructor(call: ToggleRegistryCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
