// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Registry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Registry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Registry", id.toString(), this);
  }

  static load(id: string): Registry | null {
    return store.get("Registry", id) as Registry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get registryId(): i32 {
    let value = this.get("registryId");
    return value.toI32();
  }

  set registryId(value: i32) {
    this.set("registryId", Value.fromI32(value));
  }

  get dapps(): Array<string> {
    let value = this.get("dapps");
    return value.toStringArray();
  }

  set dapps(value: Array<string>) {
    this.set("dapps", Value.fromStringArray(value));
  }
}

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get pendingTime(): BigInt | null {
    let value = this.get("pendingTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingTime(value: BigInt | null) {
    if (value === null) {
      this.unset("pendingTime");
    } else {
      this.set("pendingTime", Value.fromBigInt(value as BigInt));
    }
  }

  get pendingConfirmAfter(): BigInt | null {
    let value = this.get("pendingConfirmAfter");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingConfirmAfter(value: BigInt | null) {
    if (value === null) {
      this.unset("pendingConfirmAfter");
    } else {
      this.set("pendingConfirmAfter", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Dapp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Dapp entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Dapp entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Dapp", id.toString(), this);
  }

  static load(id: string): Dapp | null {
    return store.get("Dapp", id) as Dapp | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validAfter(): BigInt {
    let value = this.get("validAfter");
    return value.toBigInt();
  }

  set validAfter(value: BigInt) {
    this.set("validAfter", Value.fromBigInt(value));
  }

  get lastChange(): BigInt {
    let value = this.get("lastChange");
    return value.toBigInt();
  }

  set lastChange(value: BigInt) {
    this.set("lastChange", Value.fromBigInt(value));
  }

  get registry(): string {
    let value = this.get("registry");
    return value.toString();
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get dapp(): Bytes {
    let value = this.get("dapp");
    return value.toBytes();
  }

  set dapp(value: Bytes) {
    this.set("dapp", Value.fromBytes(value));
  }

  get filter(): Bytes {
    let value = this.get("filter");
    return value.toBytes();
  }

  set filter(value: Bytes) {
    this.set("filter", Value.fromBytes(value));
  }

  get pendingFilter(): Bytes | null {
    let value = this.get("pendingFilter");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pendingFilter(value: Bytes | null) {
    if (value === null) {
      this.unset("pendingFilter");
    } else {
      this.set("pendingFilter", Value.fromBytes(value as Bytes));
    }
  }

  get pendingConfirmAfter(): BigInt | null {
    let value = this.get("pendingConfirmAfter");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingConfirmAfter(value: BigInt | null) {
    if (value === null) {
      this.unset("pendingConfirmAfter");
    } else {
      this.set("pendingConfirmAfter", Value.fromBigInt(value as BigInt));
    }
  }
}
